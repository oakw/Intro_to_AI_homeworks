# Example (and files in Go) generated by ChatGPT:
# https://chatgpt.com/share/67b0f680-f48c-8007-9b64-5aca4c3f25e6
import numpy as np
import math

BOARD_SIZE = 5  # Small board for simplicity
WIN_LENGTH = 4  # Winning condition

class Gomoku:
    def __init__(self):
        self.board = np.zeros((BOARD_SIZE, BOARD_SIZE), dtype=int)

    def is_winner(self, player):
        for i in range(BOARD_SIZE):
            for j in range(BOARD_SIZE - WIN_LENGTH + 1):
                if all(self.board[i, j + k] == player for k in range(WIN_LENGTH)):
                    return True
                if all(self.board[j + k, i] == player for k in range(WIN_LENGTH)):
                    return True
        return False

    def get_empty_cells(self):
        return [(i, j) for i in range(BOARD_SIZE) for j in range(BOARD_SIZE) if self.board[i, j] == 0]

    def make_move(self, row, col, player):
        self.board[row, col] = player

    def undo_move(self, row, col):
        self.board[row, col] = 0

    def minimax(self, depth, alpha, beta, maximizing):
        if self.is_winner(1): return 10 - depth
        if self.is_winner(2): return depth - 10
        if not self.get_empty_cells(): return 0
        
        if maximizing:
            max_eval = -math.inf
            for row, col in self.get_empty_cells():
                self.make_move(row, col, 1)
                eval = self.minimax(depth + 1, alpha, beta, False)
                self.undo_move(row, col)
                max_eval = max(max_eval, eval)
                alpha = max(alpha, eval)
                if beta <= alpha:
                    break
            return max_eval
        else:
            min_eval = math.inf
            for row, col in self.get_empty_cells():
                self.make_move(row, col, 2)
                eval = self.minimax(depth + 1, alpha, beta, True)
                self.undo_move(row, col)
                min_eval = min(min_eval, eval)
                beta = min(beta, eval)
                if beta <= alpha:
                    break
            return min_eval

    def best_move(self):
        best_score = -math.inf
        move = (-1, -1)
        for row, col in self.get_empty_cells():
            self.make_move(row, col, 1)
            score = self.minimax(0, -math.inf, math.inf, False)
            self.undo_move(row, col)
            if score > best_score:
                best_score = score
                move = (row, col)
        return move

    def play(self):
        while self.get_empty_cells():
            print(self.board)
            row, col = map(int, input("Enter your move (row col): ").split())
            self.make_move(row, col, 2)
            if self.is_winner(2):
                print("You win!")
                break
            ai_move = self.best_move()
            self.make_move(ai_move[0], ai_move[1], 1)
            if self.is_winner(1):
                print("AI wins!")
                break

if __name__ == "__main__":
    game = Gomoku()
    game.play()
